version: "3.9"
name: cep

services:
  ######### BROKER #########

  broker:
    image: confluentinc/cp-kafka:latest
    container_name: "broker"
    hostname: "broker"
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_NODE_ID: 1
      CLUSTER_ID: "MkU3OEVBNTcwNTJENDM2Qk"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@broker:39092"

      KAFKA_CONTROLLER_LISTENER_NAMES: "INTERNAL_CONTROLLER"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL_BROKER"
      KAFKA_LISTENERS: "EXTERNAL_BROKER://broker:9092,INTERNAL_BROKER://broker:29092,INTERNAL_CONTROLLER://broker:39092"
      KAFKA_ADVERTISED_LISTENERS: "EXTERNAL_BROKER://localhost:9092,INTERNAL_BROKER://broker:29092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "EXTERNAL_BROKER:PLAINTEXT,INTERNAL_BROKER:PLAINTEXT,INTERNAL_CONTROLLER:PLAINTEXT"

      KAFKA_DEFAULT_REPLICATION_FACTOR: 1 #(?)
      KAFKA_MIN_INSYNC_REPLICAS: 1 #(?)
      KAFKA_AUTO_LEADER_REBALANCE_ENABLE: true
      KAFKA_LEADER_IMBALANCE_PER_BROKER_PERCENTAGE: 10
      KAFKA_LEADER_IMBALANCE_CHECK_INTERVAL_SECONDS: 300

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

      KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE: false

      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_DELETE_TOPIC_ENABLE: true
      KAFKA_NUM_PARTITIONS: 1 #(?)

      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1 #?
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1 #?

      KAFKA_LOG_CLEANER_ENABLE: true
      KAFKA_LOG_CLEANUP_POLICY: "compact" #(?)

      KAFKA_METRIC_REPORTERS: ''
      KAFKA_METRICS_POLLING_INTERVAL_SECS: 10
      ## JMX
      # KAFKA_JMX_PORT: 9101 #(?)
      # KAFKA_JMX_HOSTNAME: "broker"

      EXTRA_ARGS:
        "-javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-1.0.1.jar=9101:/etc/jmx/jmx.yaml"

    volumes:
      #- ./brokers/broker/log:/var/lib/kafka/log
      #- ./brokers/broker/data:/var/lib/kafka/data
      - ./config/jmx/agents/jmx_prometheus_javaagent-1.0.1.jar:/usr/share/jmx_exporter/jmx_prometheus_javaagent-1.0.1.jar
      - ./config/jmx/jmx.yaml:/etc/jmx/jmx.yaml
    networks:
      - cep-web

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: schema-registry
    hostname: schema-registry
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "broker:29092"
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    depends_on:
      - broker
    networks:
      - cep-web

  akhq:
    image: tchiotludo/akhq:latest
    ports:
      - "8082:8082"
    environment:
      AKHQ_CONFIGURATION: |
        micronaut:
          server:
            port: 8082
        akhq:
          connections:
            infrastructure:
              properties:
                bootstrap.servers: "broker:29092"
    depends_on:
      - broker
    networks:
      - cep-web

  ######### KSQL #########

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:7.8.0
    hostname: ksqldb-server
    container_name: ksqldb-server
    ports:
      - "8088:8088"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "broker:29092"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_KSQL_CONNECT_URL: "http://connect:8083"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
    depends_on:
      - broker
    networks:
      - cep-web

  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:7.8.0
    container_name: ksqldb-cli
    entrypoint: /bin/sh
    tty: true
    depends_on:
      - ksqldb-server
    networks:
      - cep-web

  ######### METRICS #########

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yaml:/etc/prometheus/prometheus.yml
    depends_on:
      - broker
    networks:
      - cep-web

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - broker
      - prometheus
    networks:
      - cep-web

  app:
    image: cep/cep-core
    build:
      context: ./
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      - broker
    networks:
      - cep-web

volumes:
  grafana_data:

networks:
  # Название сети
  cep-web:
    driver: bridge
